#loading count data and do voom normalisation
library(edgeR)
library(limma)
NZ.count <- read.csv("NZ_count.csv", 
              check.names=TRUE, stringsAsFactors=FALSE)
y <- DGEList(counts=NZ.count[,2:25], genes=NZ.count[,1] )
y <- calcNormFactors(y)
keep <- rowSums(cpm(y) > 3) >= 24
y <- y[keep,]
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y)
#voom normalisation in voom/limma
v1 <- voom(y,plot=TRUE)
voom_matrix <- cbind(v1$genes, v1$E)
NZ.data <- voom_matrix
OZ.count <- read.csv("OZ_count.csv", 
                    check.names=TRUE, stringsAsFactors=FALSE)
y <- DGEList(OZ.count=NZ.count[,2:63], genes=NZ.OZ.count[,1] )
y <- calcNormFactors(y)
keep <- rowSums(cpm(y) > 3) >= 62
y <- y[keep,]
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y)
#voom normalisation in voom/limma
v1 <- voom(y,plot=TRUE)
voom_matrix <- cbind(v1$genes, v1$E)
OZ.data <- voom_matrix

#combine oz and nz data and do quantile normalisation
combined <- (merge(NZ.data, OZ.data, by.x = "genes", by.y = "genes"))
combined.data <- combined[,-1]
rownames(combined.data) <- combined[,1]
combined.matrix <- data.matrix(combined.data,rownames.force= TRUE)
library(preprocessCore)
combined.normal <- normalize.quantiles(combined.matrix,copy=TRUE)
rownames(combined.normal)<-row.names(combined.data)
colnames(combined.normal)<-colnames(combined.data)
combined.normal <- data.frame(combined.normal)

#run PCIT to identify meaningful correlations:
library(PCIT)
cor.mat <- cor(combined.normal[,-1])
pcit.res <- pcit(cor.mat)
signif <- idx(pcit.res)
nonsignif <- idxInvert(nrow(cor.mat), signif)
cor.mat[nonsignif] <- 0
adj <- cor.mat
el <- getEdgeList(adj, rm.zero=TRUE)
el$sign[el$Weight<0] <- '-'
el$sign[el$Weight>0] <- '+'
el$Weight <- abs(el$Weight)
#save file for cytoscape network analysis
write.csv(el, file="cor.mat.corr.cytoscape.csv", row.names=FALSE, col.names=TRUE, sep="\t",
          quote=FALSE)

#use DESeq2 to run PCA analysis of counts
NZ.count <- read.csv("NZ_count.csv", 
              check.names=TRUE, stringsAsFactors=FALSE)
OZ.count <- read.csv("OZ_count.csv", 
                    check.names=TRUE, stringsAsFactors=FALSE)
#merge oz and nz
oz.nz.count <- merge(NZ.count,OZ.count,by='ID')
oz.nz.count1 <- oz.nz.count[,-1]
rownames(oz.nz.count1) <- oz.nz.count[,1]

#input roslin data:
ros.count <- read.table('all_tissue.txt',header=T)
colnames(ros.count) <- gsub('ewe_|lamb_|ram_','Roslin.',colnames(ros.count))
oz.nz.ros.count <- merge(oz.nz.count,ros.count,by='ID')
oz.nz.ros.count1 <- oz.nz.ros.count[,-1]
rownames(oz.nz.ros.count1) <- oz.nz.ros.count[,1]

#make a design mat:
cond <- as.data.frame(colnames(oz.nz.ros.count1))
cond$locale <- ifelse(grepl('AUS',cond[,1]),'AUS',ifelse(grepl('Roslin',cond[,1]),'Roslin','NZ'))
colnames(cond)[1] <- 'id' 
cond$tissue <- ifelse(grepl('AUS',cond[,1]),'rumen',ifelse(grepl('Roslin',cond[,1]),
                                                           substr(cond[,1],8,nchar(as.character(cond[,1]))),'rumen'))
cond$tissue <- gsub('.1|.2','',cond$tissue)

#check match
colnames(oz.nz.ros.count1)==cond[,1]
cond[,2] <- as.factor(cond[,2])
cond[,3] <- as.factor(cond[,3])
#library(DESeq2)
#library(BiocParallel)
all.dds <- DESeqDataSetFromMatrix(countData =oz.nz.ros.count1,
                                       colData = cond, design = ~ locale + tissue)
all.dds
#filtering exon data:
all.dds1 <- all.dds[ rowSums(counts(all.dds)) > 1, ]
#define gene ref level
all.dds1$locale <- relevel(all.dds1$locale, ref="Roslin")
all.dds2 <- estimateSizeFactors(all.dds1)
gene.se <- SummarizedExperiment(log2(counts(all.dds2, normalized=TRUE) + 1),
                                colData=colData(all.dds2))
#generate pca data
pca.gene.data <- plotPCA(DESeqTransform(gene.se),intgroup=c("locale","tissue"),ntop=500,
                         returnData=T)
ggplot(data=pca.gene.data, aes(PC1, PC2, colour =tissue,shape=locale))+ 
  geom_point(size=3) 

#correlation analysis between individual gene expression and a phenotype:
#make a file with 1st row the array/animal number, 2nd row the phenotype and from 3rd row the gene expression
mydata0=read.csv("gene.pheno.csv")
mydata1 = setNames(data.frame(t(mydata0[,-1])), mydata0[,1])
y <- mydata1[,1]
z <- mydata1[,(2:(nrow(mydata1)-1))]
cor_matrix_full <- t(cor(as.matrix(y),I(as.matrix(z))))
write.csv(cor_matrix_full, "whole_gene_pheno_cor.csv"))

#fisher zscore tests for difference between correlations (generate a value), given a dataframe with columns of variables are to be correlated:
p.corr.diff <- function(r1,r2,n1,n2){
  p.corr.diff.value <- substitute(~~italic(aus.v.nz.corr.diff.p)~"="~cp*"",
                   list(cp = format(2*(1-pnorm(abs(fisher.z(r1= cor(oz.subdata$cell.cycle,
                                                                    oz.subdata$metabolism.specific),
                                                            r2=cor(nz.subdata$cell.cycle,
                                                                   nz.subdata$metabolism.specific),
                                                            n1=length(oz.subdata$cell.cycle),
                                                            n2=length(nz.subdata$cell.cycle))))),
                                    digits = 3)))
 as.character(as.expression(p.corr.diff.value));
}

#correlation analysis betwween gene expression normalised using muscle gene set expression and MRT (only available in AUS data)
#load gene cluster files with normalised expression values
ozdata3 <- read.csv("OZ-defined-gene-pheno1.csv", 
                                check.names=TRUE, stringsAsFactors=FALSE,row.names=1)
muscle.exp <- subset(ozdata3, type=="muscle-OZ-all-NZ")
muscle.mean.exp <- t(as.data.frame(colMeans(muscle.exp[,-1])))
rownames(muscle.mean.exp)[1] <- "muscle.mean"
nm.muscle.exp.data <- merge(t(muscle.mean.exp),t(oz.data),by="row.names")  
nm.muscle.exp.data1 <- nm.muscle.exp.data[,-1]
rownames(nm.muscle.exp.data1) <- nm.muscle.exp.data[,1]
nm.muscle.exp.data2 <- nm.muscle.exp.data1[,-1]/nm.muscle.exp.data1[,1]
nm.muscle.mrt.data <- merge(ozdata3.1[,6:7], log2(nm.muscle.exp.data2),by="row.names")
nm.muscle.mrt.data1 <- nm.muscle.mrt.data[,-c(1:2)]
rownames(nm.muscle.mrt.data1) <- nm.muscle.mrt.data[,1]
temps2 <- as.matrix(apply(nm.muscle.mrt.data1, 2, cor.test,method = "pearson",exact=T, x = nm.muscle.mrt.data1$rumen_MRT))
temps.p <- as.matrix(sapply(temps2, function(x){as.numeric(x[3])}))
temps.r <- as.matrix(sapply(temps2, function(x){as.numeric(x[4])}))
cor.p.matrix.muscle.mrt <- data.frame(cbind(temps2[,-1],temps.r,temps.p))
colnames(cor.p.matrix.muscle.mrt)[1] <- "nm.mu.cor.mrt"
colnames(cor.p.matrix.muscle.mrt)[2] <- "nm.mu.p.mrt"
cor.p.matrix.muscle.mrt1 <- data.frame(lapply(cor.p.matrix.muscle.mrt, as.character))
rownames(cor.p.matrix.muscle.mrt1) <- rownames(cor.p.matrix.muscle.mrt)
write.csv(cor.p.matrix.muscle.mrt1, "nm.cor.p.mu.mrt.csv")

#differential expression between 10 longest and 10 shortest MRT animals (only available in AUS data):
ozdata3.t <- as.data.frame(t(ozdata3[,-1]))
library(matrixStats)
#make a ranking column to selection top and bottom animals
mrt1 <- cbind(rownames(ozdata3.t),as.data.frame(ozdata3.t$rumen_MRT),
              t(as.data.frame(colRanks(as.matrix(ozdata3.t$rumen_MRT))))) 
colnames(mrt1) <- c("Id","MRT","rk")
mrt1$rk <- as.numeric(as.character(mrt1$rk))
mrt1.selected <- subset(mrt1,rk<11 | rk>52)
#creating another column with status of MRT
mrt1.selected$MRT.s <- ifelse(mrt1.selected$rk <=10, "s.MRT", "l.MRT")
mrt1.select1 <- mrt1.selected[,-1]
rownames(mrt1.select1) <- mrt1.selected[,1]

#merge with muscle mean exp and etc to build design matrix:
muscle.exp <- subset(ozdata3, type=="muscle-OZ-all-NZ")
muscle.mean.exp <- t(as.data.frame(colMeans(muscle.exp[,-1])))
rownames(muscle.mean.exp)[1] <- "muscle.mean"
mrt1.select.mu <- merge(mrt1.select1,t(log2(muscle.mean.exp)),by="row.names")
mrt1.select.mu1 <- mrt1.select.mu[,-1]
rownames(mrt1.select.mu1) <- mrt1.select.mu[,1]
#getting oz pheno:
oz.pheno.all <- read.csv("oz.pheno.csv", 
                         check.names=TRUE, stringsAsFactors=FALSE,row.names=1)
mrt1.select.mu.blk <- merge(mrt1.select.mu1,(t(oz.pheno.all))[,1:2],by="row.names")
#making design table
mrt.ls.design <- mrt1.select.mu.blk[,-c(2:3)]
colnames(mrt.ls.design)[1] <- "Sample"
class(mrt.ls.design$muscle.mean)
#getting counts data
oz.all.counts <- read.csv("OZ_count.csv",check.names=T, stringsAsFactors=F,header=1, row.names=1)
mrt.select.count <- merge(mrt1.select1[,c(1,3)],t(oz.all.counts),by="row.names")
mrt.select.count1 <- mrt.select.count[,-1]
rownames(mrt.select.count1) <- mrt.select.count[,1]
mrt.selelct.gene <- t(mrt.select.count1[,-c(1,2)])
y.mrt.mu <- DGEList(counts=mrt.selelct.gene, genes=rownames(mrt.selelct.gene))
y.mrt.mu <- calcNormFactors(y.mrt.mu)
#filter low count gene for DE
keep <- rowSums(cpm(y.mrt.mu)>1) >= 20
y.mrt.mu <- y.mrt.mu[keep,]
dim(y.mrt.mu)
head(y.mrt.mu)
#redo lib size:
y.mrt.mu$samples$lib.size <- colSums(y.mrt.mu$counts)
#treat means block
treat=as.factor(mrt.ls.design$treat)
mrt=as.factor(mrt.ls.design$MRT.s)
muscle=as.numeric(mrt.ls.design$muscle.mean)
mrt <- relevel(mrt, ref="l.MRT")
design.mrt.mu <- model.matrix(~treat+muscle+mrt)
design.mrt.mu
#assign right design names, important
rownames(design.mrt.mu) <- rownames(mrt1.select.mu1)
#write.table(design, file="design.csv")
y.mrt.mu <- estimateGLMCommonDisp(y.mrt.mu, design.mrt.mu, verbose=TRUE)
y.mrt.mu <- estimateGLMTrendedDisp(y.mrt.mu, design.mrt.mu)
y.mrt.mu <- estimateGLMTagwiseDisp(y.mrt.mu, design.mrt.mu)
#fit the model
fit.mrt.mu <- glmFit(y.mrt.mu,design.mrt.mu)
#geeting DE for high and low MRT
mrtDE.mu <- glmLRT(fit.mrt.mu,coef=6)
topTags(mrtDE.mu)
tab <- topTags(mrtDE.mu, n=30000)
write.csv(tab, "MRT_DE_mu.csv")



